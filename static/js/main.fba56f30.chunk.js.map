{"version":3,"sources":["logo.svg","components/dashboardStyle.js","components/dashboard.js","App.js","serviceWorker.js","index.js","constants/constants.js"],"names":["module","exports","DashboardStyle","styled","div","Option","Select","TextArea","Input","Dashboard","handleChange","value","console","log","className","defaultValue","style","width","onChange","this","constants","IntervalSecond","map","sec","index","placeholder","rows","type","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Object","freeze"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,6nBCE3C,IAAMC,E,MAAiBC,EAAOC,IAAV,KCKZC,EAAWC,IAAXD,OACAE,EAAaC,IAAbD,SA6COE,E,2MAzCXC,aAAe,SAACC,GACZC,QAAQC,IAAR,mBAAwBF,K,wEAIxB,OACI,kBAACT,EAAD,KAEI,yBAAKY,UAAU,kBACX,yBAAKA,UAAU,iBAAf,sBACA,kBAAC,IAAD,CAAQC,aAAa,IAAIC,MAAO,CAAEC,MAAO,KAAOC,SAAUC,KAAKT,cAC1DU,IAAUC,eAAeC,IAAI,SAACC,EAAKC,GAChC,OAAO,kBAACnB,EAAD,CAAQM,MAAOY,GAAMA,OAIxC,yBAAKT,UAAU,kBACX,yBAAKA,UAAU,iBAAf,aACA,kBAAC,IAAD,CAAOA,UAAU,cACbW,YAAY,2BAEpB,yBAAKX,UAAU,kBAAf,eAGA,6BACI,kBAACP,EAAD,CAAUmB,KAAM,GAAID,YAAY,yBAEpC,yBAAKX,UAAU,oBACX,kBAAC,IAAD,CAAQa,KAAK,WAAb,OACA,kBAAC,IAAD,CAAQA,KAAK,UAAb,e,GAhCIC,aCKTC,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCGcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,iBEnInB5C,EAAOC,QAAU4C,OAAOC,OAAO,CAC3BzB,eAAgB,CACZ,EACA,EACA,EACA,Q","file":"static/js/main.fba56f30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components';\r\n\r\nconst DashboardStyle = styled.div`\r\n\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .dash_caption{\r\n        width : 50vw;\r\n    }\r\n\r\n    .flex_container{\r\n        display: flex;\r\n        align-items   : baseline;\r\n    }\r\n\r\n    .input_style{\r\n        width : 50vw;\r\n    }\r\n\r\n    .button_container{\r\n        display:flex;\r\n        justify-content : space-around;\r\n    }\r\n\r\n`\r\n\r\nexport {\r\n    DashboardStyle\r\n}\r\n","\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Input, Select } from 'antd';\r\nimport constants from './../constants/constants';\r\nimport { DashboardStyle } from './dashboardStyle';\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nclass Dashboard extends Component {\r\n\r\n\r\n    handleChange = (value) => {\r\n        console.log(`selected ${value}`);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <DashboardStyle >\r\n\r\n                <div className='flex_container'>\r\n                    <div className=' dash_caption'>Interval in second</div>\r\n                    <Select defaultValue=\"5\" style={{ width: 120 }} onChange={this.handleChange}>\r\n                        {constants.IntervalSecond.map((sec, index) => {\r\n                            return <Option value={sec}>{sec}</Option>\r\n                        })}\r\n                    </Select>\r\n                </div>\r\n                <div className='flex_container'>\r\n                    <div className=' dash_caption'>key in Id</div>\r\n                    <Input className='input_style'\r\n                        placeholder=\"Please key in your Id\" />\r\n                </div>\r\n                <div className='flex_container'>\r\n                    Message box\r\n                    </div>\r\n                <div>\r\n                    <TextArea rows={10} placeholder=\"Paste your url here\" />\r\n                </div>\r\n                <div className='button_container'>\r\n                    <Button type=\"primary\">Run</Button>\r\n                    <Button type=\"danger\">Clear</Button>\r\n                </div>\r\n                {/* </div> */}\r\n            </DashboardStyle>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Dashboard;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Dashboard from './components/dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = Object.freeze({\r\n    IntervalSecond: [\r\n        3,\r\n        5,\r\n        8,\r\n        10\r\n    ]\r\n\r\n});"],"sourceRoot":""}