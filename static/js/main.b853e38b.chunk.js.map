{"version":3,"sources":["logo.svg","components/dashboardStyle.js","components/dashboard.js","App.js","serviceWorker.js","index.js","constants/constants.js"],"names":["module","exports","DashboardStyle","styled","div","Option","Select","TextArea","Input","Dashboard","props","onProcessUrlList","interval","state","newUrlList","aUrlList","urlList","split","console","log","map","url","index","aUrl","trim","length","id","join","newUrlListMine","popupwindow","title","w","h","y","window","outerHeight","screenY","x","outerWidth","screenX","open","mine","setState","message","forEach","tabWindow","setTimeout","close","closeWindowcb","aListSize","onClearUrlList","onIntervalSelectChange","onInputChange","value","target","onIdChange","processMineList","this","className","defaultValue","style","width","onChange","constants","IntervalSecond","sec","placeholder","rows","type","onClick","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Object","freeze"],"mappings":"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","file":"static/js/main.b853e38b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components';\r\n\r\nconst DashboardStyle = styled.div`\r\n\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .dash_caption{\r\n        width : 50vw;\r\n    }\r\n\r\n    .flex_container{\r\n        display: flex;\r\n        align-items   : baseline;\r\n    }\r\n\r\n    .input_style{\r\n        width : 50vw;\r\n    }\r\n\r\n    .button_container{\r\n        display:flex;\r\n        justify-content : space-around;\r\n    }\r\n\r\n`\r\n\r\nexport {\r\n    DashboardStyle\r\n}\r\n","\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Input, Select } from 'antd';\r\nimport constants from './../constants/constants';\r\nimport { DashboardStyle } from './dashboardStyle';\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\nclass Dashboard extends Component {\r\n\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            interval: 8,\r\n            id: 'Q132627027',\r\n            urlList: `https://m.qoo10.sg/livetweet/37778/Q\r\n            https://m.qoo10.sg/livetweet/37875/Q\r\n            https://m.qoo10.sg/livetweet/37920/Q\r\n            https://m.qoo10.sg/livetweet/38020/Q\r\n            https://m.qoo10.sg/livetweet/38020/Q`,\r\n            message: '0/0 completed',\r\n\r\n            mine: {\r\n                id: 'Q132627027',\r\n                aUrlList: [],\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    onProcessUrlList = () => {\r\n\r\n        const interval = this.state.interval;\r\n\r\n        var deliminator = '/';\r\n        var newUrlList = [];\r\n\r\n        //get list of url\r\n        var aUrlList = this.state.urlList.split(\"\\n\");\r\n        console.log('aUrlList ', aUrlList);\r\n\r\n        //replace id with provide id\r\n        newUrlList = aUrlList.map((url, index) => {\r\n            var newUrl = null;\r\n            var trimUrl = url.trim();\r\n\r\n            //check and splice url with id\r\n            var aUrl = trimUrl.split(deliminator)\r\n\r\n            //replace last array\r\n            aUrl[aUrl.length - 1] = this.state.id;\r\n\r\n            newUrl = aUrl.join(deliminator);\r\n\r\n            return newUrl;\r\n        });\r\n\r\n        var newUrlListMine = [];\r\n        newUrlListMine = aUrlList.map((url, index) => {\r\n            var newUrl = null;\r\n            var trimUrl = url.trim();\r\n\r\n            //check and splice url with id\r\n            var aUrl = trimUrl.split(deliminator)\r\n\r\n            //replace last array\r\n            aUrl[aUrl.length - 1] = this.state.mine.id;\r\n\r\n            newUrl = aUrl.join(deliminator);\r\n\r\n            return newUrl;\r\n        });\r\n        console.log('newUrlList ', newUrlList);\r\n        this.setState({\r\n            message: `0/${newUrlList.length} completed...`\r\n        })\r\n\r\n\r\n        function popupwindow(url, title, w, h) {\r\n            var y = window.outerHeight / 2 + window.screenY - (h / 2)\r\n            var x = window.outerWidth / 2 + window.screenX - (w / 2)\r\n            return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=' + w + ', height=' + h + ', top=' + y + ', left=' + x);\r\n        }\r\n\r\n        //open 1 by 1 of urlList to new tab and close it after {this.state.interval} seconds\r\n        newUrlList.forEach(function (url, index) {\r\n            console.log(`${index} ${url}`);\r\n            //var tabWindow = window.open(url, `Tab ${index}`, \"height=400,width=400,modal=yes,alwaysRaised=yes\");\r\n            //var tabWindow = window.open(url, '_self');\r\n            var tabWindow = popupwindow(url, `Tab ${index}`, 400, 400);\r\n\r\n\r\n            //var tabWindowMine = window.open(url, `Tab ${index}`, \"height=400,width=400,modal=yes,alwaysRaised=yes\");\r\n\r\n            setTimeout(() => {\r\n                //console.log(arguement);\r\n                tabWindow.close();\r\n                //tabWindowMine.close();\r\n\r\n                // this.setState({\r\n                //     message: `${index}/${newUrlList.length} completed...`\r\n                // })\r\n            }, interval * 1000);\r\n            //setTimeout(this.closeWindowcb(index, tabWindow, newUrlList.length), interval * 1000);\r\n        })\r\n\r\n        newUrlListMine.forEach(function (url, index) {\r\n            console.log(`${index} ${url}`);\r\n            //var tabWindow = window.open(url, `Tab ${index}`, \"height=400,width=400,modal=yes,alwaysRaised=yes\");\r\n            //var tabWindow = window.open(url, '_self');\r\n            var tabWindow = popupwindow(url, `Tab ${index}`, 400, 400);\r\n\r\n\r\n            //var tabWindowMine = window.open(url, `Tab ${index}`, \"height=400,width=400,modal=yes,alwaysRaised=yes\");\r\n\r\n            setTimeout(() => {\r\n                //console.log(arguement);\r\n                tabWindow.close();\r\n                //tabWindowMine.close();\r\n\r\n                // this.setState({\r\n                //     message: `${index}/${newUrlList.length} completed...`\r\n                // })\r\n            }, interval * 1000);\r\n            //setTimeout(this.closeWindowcb(index, tabWindow, newUrlList.length), interval * 1000);\r\n        })\r\n\r\n\r\n    }\r\n\r\n    closeWindowcb = (index, tabWindow, aListSize) => {\r\n        //console.log(arguement);\r\n        tabWindow.close();\r\n        //tabWindowMine.close();\r\n\r\n        this.setState({\r\n            message: `${index}/${aListSize} completed...`\r\n        });\r\n    }\r\n\r\n\r\n    onClearUrlList = () => {\r\n        this.setState({\r\n            urlList: ''\r\n        })\r\n    }\r\n\r\n\r\n    onIntervalSelectChange = (interval) => {\r\n        console.log(`onIntervalSelectChange ${interval}`);\r\n        this.setState({\r\n            interval\r\n        })\r\n    }\r\n\r\n    onInputChange = ({ target: { value } }) => {\r\n        console.log(`onInputChange ${value}`);\r\n        this.setState({\r\n            urlList: value\r\n        });\r\n    }\r\n\r\n    onIdChange = ({ target: { value } }) => {\r\n        console.log(`onIdChange ${value}`);\r\n        this.setState({\r\n            id: value\r\n        });\r\n    }\r\n\r\n\r\n    //#region process mine function\r\n\r\n    processMineList = () => {\r\n\r\n    }\r\n\r\n\r\n    //#endregion\r\n\r\n    render() {\r\n\r\n        const { urlList, id, message } = this.state;\r\n\r\n\r\n        return (\r\n            <DashboardStyle >\r\n\r\n                <div className='flex_container'>\r\n                    <div className=' dash_caption'>Interval in second</div>\r\n                    <Select defaultValue=\"5\" style={{ width: 120 }} onChange={this.onIntervalSelectChange}>\r\n                        {constants.IntervalSecond.map((sec, index) => {\r\n                            return <Option value={sec}>{sec}</Option>\r\n                        })}\r\n                    </Select>\r\n                </div>\r\n                <div className='flex_container'>\r\n                    <div className=' dash_caption'>key in Id</div>\r\n                    <Input className='input_style'\r\n                        placeholder=\"Please key in your Id\" value={id} onChange={this.onIdChange} />\r\n                </div>\r\n                <div className='flex_container'>\r\n                    {message}\r\n                </div>\r\n                <div>\r\n                    <TextArea rows={10} placeholder=\"Paste your url here\" value={urlList} onChange={this.onInputChange} />\r\n                </div>\r\n                <div className='button_container'>\r\n                    <Button type=\"primary\" onClick={this.onProcessUrlList}>Run</Button>\r\n                    <Button type=\"danger\" onClick={this.onClearUrlList}>Clear</Button>\r\n                </div>\r\n                {/* </div> */}\r\n            </DashboardStyle>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Dashboard;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport Dashboard from './components/dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = Object.freeze({\r\n    IntervalSecond: [\r\n        3,\r\n        5,\r\n        8,\r\n        10,\r\n        13,\r\n        15,\r\n        18,\r\n        20,\r\n        25,\r\n        30,\r\n        40,\r\n        50\r\n    ]\r\n\r\n});"],"sourceRoot":""}